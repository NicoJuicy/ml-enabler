"""empty message

Revision ID: 021fe21a3358
Revises: 391dd108d76d
Create Date: 2020-09-02 21:16:53.619233

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '021fe21a3358'
down_revision = '391dd108d76d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('export_predictions')
    op.drop_table('export_predictiontiles')
    op.drop_table('export_mlmodels')
    op.drop_table('export_predictiontiles2')
    op.alter_column('predictions', 'version',
               existing_type=sa.TEXT(),
               nullable=False)
    op.drop_constraint('predictions_unique_semver', 'predictions', type_='unique')
    op.drop_column('predictions', 'chip_name')
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'password',
               existing_type=sa.TEXT(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'password',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               nullable=False)
    op.add_column('predictions', sa.Column('chip_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_unique_constraint('predictions_unique_semver', 'predictions', ['model_id', 'version'])
    op.alter_column('predictions', 'version',
               existing_type=sa.TEXT(),
               nullable=True)
    op.create_table('export_predictiontiles2',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('prediction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('quadkey', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('centroid', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), autoincrement=False, nullable=True),
    sa.Column('predictions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('quadkey_geom', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), autoincrement=False, nullable=True),
    sa.Column('validity', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.create_table('export_mlmodels',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('project_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('archived', sa.BOOLEAN(), autoincrement=False, nullable=True)
    )
    op.create_table('export_predictiontiles',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('prediction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('quadkey', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('centroid', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), autoincrement=False, nullable=True),
    sa.Column('predictions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('quadkey_geom', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), autoincrement=False, nullable=True),
    sa.Column('validity', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.create_table('export_predictions',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('model_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('tile_zoom', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('docker_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('docker_link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('log_link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('model_link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('save_link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('inf_list', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('inf_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('inf_binary', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('inf_supertile', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('checkpoint_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tfrecord_link', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###
